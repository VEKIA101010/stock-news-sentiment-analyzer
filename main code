import tkinter as tk
from tkinter import messagebox, filedialog
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
import matplotlib.pyplot as plt
import os
import datetime

def fetch_news_titles(ticker):
    url = f"https://finance.yahoo.com/quote/{ticker}/news?p={ticker}"
    headers = {'User-Agent': 'Mozilla/5.0'}
    resp = requests.get(url, headers=headers)
    if resp.status_code != 200:
        raise Exception(f"Failed to fetch news for {ticker}")
    soup = BeautifulSoup(resp.text, 'html.parser')
    titles = []
    for item in soup.select('h3'):
        text = item.get_text(strip=True)
        if text:
            titles.append(text)
    return titles[:20]  

def analyze_sentiment(titles):
    results = {'positive': 0, 'neutral': 0, 'negative': 0}
    for title in titles:
        blob = TextBlob(title)
        polarity = blob.sentiment.polarity
        if polarity > 0.1:
            results['positive'] += 1
        elif polarity < -0.1:
            results['negative'] += 1
        else:
            results['neutral'] += 1
    return results

def plot_sentiment(sentiment_counts, ticker):
    labels = list(sentiment_counts.keys())
    counts = list(sentiment_counts.values())

    plt.figure(figsize=(6,4))
    bars = plt.bar(labels, counts, color=['green', 'gray', 'red'])
    plt.title(f"News Sentiment for {ticker.upper()}")
    plt.ylabel("Number of Articles")

    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2, yval + 0.1, yval, ha='center', va='bottom')

    filename = f"sentiment_{ticker}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
    plt.tight_layout()
    plt.savefig(filename)
    plt.close()
    return filename

def generate_report(ticker, sentiment_counts, titles, filename):
    report_file = f"news_sentiment_report_{ticker}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(f"News Sentiment Report for {ticker.upper()}\n\n")
        f.write(f"Sentiment Counts:\n")
        for k, v in sentiment_counts.items():
            f.write(f"  {k.title()}: {v}\n")
        f.write("\nSample News Titles:\n")
        for title in titles[:10]:
            f.write(f"- {title}\n")
    return report_file

def on_submit():
    ticker = entry.get().strip().upper()
    if not ticker:
        messagebox.showerror("Input Error", "Please enter a stock ticker symbol.")
        return
    try:
        titles = fetch_news_titles(ticker)
        if not titles:
            messagebox.showinfo("No News", f"No news found for {ticker}")
            return
        sentiment_counts = analyze_sentiment(titles)
        img_path = plot_sentiment(sentiment_counts, ticker)
        report_path = generate_report(ticker, sentiment_counts, titles, img_path)
        messagebox.showinfo("Analysis Complete",
                            f"Sentiment chart saved: {img_path}\nReport saved: {report_path}")
        os.startfile(img_path)  
    except Exception as e:
        messagebox.showerror("Error", str(e))

root = tk.Tk()
root.title("Financial News Sentiment Scanner")
root.geometry("450x200")
root.resizable(False, False)

tk.Label(root, text="Enter Stock Ticker:", font=("Arial", 14)).pack(pady=15)
entry = tk.Entry(root, font=("Arial", 14), width=20)
entry.pack(pady=5)

btn = tk.Button(root, text="Analyze Sentiment", command=on_submit, bg="#4CAF50", fg="white", font=("Arial", 12))
btn.pack(pady=20)

root.mainloop()
